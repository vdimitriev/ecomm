schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Image {
  id: ID
  imageId: String
  priority: Int
  url: String
}

input ImageInput {
  url: String
}

type Mutation {
  addProductImages(images: [ImageInput], productId: String): [Image] @join__field(graph: PRODUCTS)
  createProduct(product: ProductInput): Product @join__field(graph: PRODUCTS)
}

type Product {
  id: ID
  images: [Image]
  name: String
  price: String
  productId: String
  status: String
}

input ProductInput {
  images: [ImageInput]
  name: String
  price: String
  status: String
}

type Query {
  getImageByImageId(imageId: String):Image @join__field(graph: IMAGES)
  getAllImages:[Image] @join__field(graph: IMAGES)
  getAllImagesByProductId(productId: String):[Image] @join__field(graph: IMAGES)
  getAllProducts:[Product] @join__field(graph: PRODUCTS)
  feedProducts(filter: String, skip: Int, take: Int): [Product] @join__field(graph: PRODUCTS)
  getProductByProductId(productId:String):Product @join__field(graph: PRODUCTS)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  IMAGES @join__graph(name: "images" url: "http://ecomm-images:8082/graphql")
  PRODUCTS @join__graph(name: "products" url: "http://ecomm-products:8081/graphql")
}

